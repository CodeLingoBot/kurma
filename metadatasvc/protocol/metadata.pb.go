// Code generated by protoc-gen-go.
// source: metadata.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	metadata.proto

It has these top-level messages:
	PodDefinition
	PodID
	RegisterResponse
	UnregisterResponse
*/
package protocol

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// The request message containing the user's name.
type PodDefinition struct {
	ID          *PodID `protobuf:"bytes,1,opt" json:"ID,omitempty"`
	PodManifest []byte `protobuf:"bytes,2,opt,proto3" json:"PodManifest,omitempty"`
	HMACKey     string `protobuf:"bytes,3,opt" json:"HMACKey,omitempty"`
}

func (m *PodDefinition) Reset()         { *m = PodDefinition{} }
func (m *PodDefinition) String() string { return proto.CompactTextString(m) }
func (*PodDefinition) ProtoMessage()    {}

func (m *PodDefinition) GetID() *PodID {
	if m != nil {
		return m.ID
	}
	return nil
}

type PodID struct {
	UUID string `protobuf:"bytes,1,opt" json:"UUID,omitempty"`
}

func (m *PodID) Reset()         { *m = PodID{} }
func (m *PodID) String() string { return proto.CompactTextString(m) }
func (*PodID) ProtoMessage()    {}

type RegisterResponse struct {
	Token string `protobuf:"bytes,1,opt" json:"Token,omitempty"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}

type UnregisterResponse struct {
	StatusCode int32 `protobuf:"varint,1,opt" json:"StatusCode,omitempty"`
}

func (m *UnregisterResponse) Reset()         { *m = UnregisterResponse{} }
func (m *UnregisterResponse) String() string { return proto.CompactTextString(m) }
func (*UnregisterResponse) ProtoMessage()    {}

func init() {
}

// Client API for KurmaMetadata service

type KurmaMetadataClient interface {
	// Sends a greeting
	RegisterPod(ctx context.Context, in *PodDefinition, opts ...grpc.CallOption) (*RegisterResponse, error)
	UnregisterPod(ctx context.Context, in *PodID, opts ...grpc.CallOption) (*UnregisterResponse, error)
}

type kurmaMetadataClient struct {
	cc *grpc.ClientConn
}

func NewKurmaMetadataClient(cc *grpc.ClientConn) KurmaMetadataClient {
	return &kurmaMetadataClient{cc}
}

func (c *kurmaMetadataClient) RegisterPod(ctx context.Context, in *PodDefinition, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/protocol.KurmaMetadata/RegisterPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kurmaMetadataClient) UnregisterPod(ctx context.Context, in *PodID, opts ...grpc.CallOption) (*UnregisterResponse, error) {
	out := new(UnregisterResponse)
	err := grpc.Invoke(ctx, "/protocol.KurmaMetadata/UnregisterPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KurmaMetadata service

type KurmaMetadataServer interface {
	// Sends a greeting
	RegisterPod(context.Context, *PodDefinition) (*RegisterResponse, error)
	UnregisterPod(context.Context, *PodID) (*UnregisterResponse, error)
}

func RegisterKurmaMetadataServer(s *grpc.Server, srv KurmaMetadataServer) {
	s.RegisterService(&_KurmaMetadata_serviceDesc, srv)
}

func _KurmaMetadata_RegisterPod_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PodDefinition)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(KurmaMetadataServer).RegisterPod(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _KurmaMetadata_UnregisterPod_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PodID)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(KurmaMetadataServer).UnregisterPod(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _KurmaMetadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.KurmaMetadata",
	HandlerType: (*KurmaMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPod",
			Handler:    _KurmaMetadata_RegisterPod_Handler,
		},
		{
			MethodName: "UnregisterPod",
			Handler:    _KurmaMetadata_UnregisterPod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
